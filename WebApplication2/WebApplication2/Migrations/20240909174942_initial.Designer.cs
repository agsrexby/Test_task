// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication2;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(RefuelingDbContext))]
    [Migration("20240909174942_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication2.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WebApplication2.Models.InfoOfDocInCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasCardOfFuel")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFolder")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOsago")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSts")
                        .HasColumnType("boolean");

                    b.Property<int>("RefuelingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefuelingId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WebApplication2.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefuelingId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RefuelingId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("WebApplication2.Models.Refueling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FuelAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InspectionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("InspectionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Refuels");
                });

            modelBuilder.Entity("WebApplication2.Models.InfoOfDocInCar", b =>
                {
                    b.HasOne("WebApplication2.Models.Refueling", "RefuelDoc")
                        .WithMany("Documents")
                        .HasForeignKey("RefuelingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefuelDoc");
                });

            modelBuilder.Entity("WebApplication2.Models.Photo", b =>
                {
                    b.HasOne("WebApplication2.Models.Refueling", "Refuel")
                        .WithMany("Photos")
                        .HasForeignKey("RefuelingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Refuel");
                });

            modelBuilder.Entity("WebApplication2.Models.Refueling", b =>
                {
                    b.HasOne("WebApplication2.Models.Car", "Car")
                        .WithMany("Refuels")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("WebApplication2.Models.Car", b =>
                {
                    b.Navigation("Refuels");
                });

            modelBuilder.Entity("WebApplication2.Models.Refueling", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
